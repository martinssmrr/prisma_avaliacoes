#!/usr/bin/env python
"""
Script para verificar e configurar banco de dados
Execute: python verificar_banco.py
"""

import os
import django
from pathlib import Path

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'setup.settings')
django.setup()

from django.db import connection
from django.core.management import execute_from_command_line
from django.conf import settings
from decouple import config

def verificar_configuracao_banco():
    """Verifica a configura√ß√£o atual do banco de dados"""
    
    print("üóÑÔ∏è Verifica√ß√£o do Banco de Dados - Prisma Avalia√ß√µes")
    print("=" * 55)
    
    # Informa√ß√µes da configura√ß√£o
    db_config = settings.DATABASES['default']
    
    print("üìã Configura√ß√£o Atual:")
    print(f"  Engine: {db_config['ENGINE']}")
    print(f"  Nome: {db_config['NAME']}")
    
    if db_config['USER']:
        print(f"  Usu√°rio: {db_config['USER']}")
    if db_config['HOST']:
        print(f"  Host: {db_config['HOST']}")
    if db_config['PORT']:
        print(f"  Porta: {db_config['PORT']}")
    
    # Verificar tipo de banco
    engine = db_config['ENGINE']
    if 'sqlite3' in engine:
        print("\nüîß Tipo: SQLite (Desenvolvimento)")
        verificar_sqlite()
    elif 'postgresql' in engine:
        print("\nüîß Tipo: PostgreSQL (Produ√ß√£o)")
        verificar_postgresql()
    elif 'mysql' in engine:
        print("\nüîß Tipo: MySQL/MariaDB (Produ√ß√£o)")
        verificar_mysql()

def verificar_sqlite():
    """Verifica configura√ß√£o espec√≠fica do SQLite"""
    
    db_path = settings.DATABASES['default']['NAME']
    
    # Verificar se arquivo existe
    if os.path.exists(db_path):
        size = os.path.getsize(db_path)
        print(f"‚úÖ Arquivo do banco existe: {db_path}")
        print(f"üìä Tamanho: {size:,} bytes ({size/1024:.1f} KB)")
    else:
        print(f"‚ö†Ô∏è  Arquivo do banco n√£o existe: {db_path}")
        print("üí° Execute: python manage.py migrate")
    
    # Verificar .gitignore
    gitignore_path = Path('.gitignore')
    if gitignore_path.exists():
        with open(gitignore_path, 'r', encoding='utf-8') as f:
            content = f.read()
            if '*.sqlite3' in content or 'db.sqlite3' in content:
                print("‚úÖ SQLite est√° no .gitignore")
            else:
                print("‚ö†Ô∏è  SQLite n√£o est√° no .gitignore!")
    
def verificar_postgresql():
    """Verifica configura√ß√£o espec√≠fica do PostgreSQL"""
    
    try:
        import psycopg2
        print("‚úÖ Driver psycopg2 instalado")
    except ImportError:
        print("‚ùå Driver psycopg2 n√£o instalado")
        print("üí° Execute: pip install psycopg2-binary")
        return
    
    # Testar conex√£o
    testar_conexao_banco()

def verificar_mysql():
    """Verifica configura√ß√£o espec√≠fica do MySQL"""
    
    try:
        import MySQLdb
        print("‚úÖ Driver MySQLdb instalado")
    except ImportError:
        try:
            import pymysql
            print("‚úÖ Driver PyMySQL instalado")
        except ImportError:
            print("‚ùå Driver MySQL n√£o instalado")
            print("üí° Execute: pip install mysqlclient")
            return
    
    # Testar conex√£o
    testar_conexao_banco()

def testar_conexao_banco():
    """Testa a conex√£o com o banco de dados"""
    
    try:
        print("\nüîå Testando conex√£o...")
        
        # Testar conex√£o
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            
        print("‚úÖ Conex√£o com banco estabelecida com sucesso!")
        
        # Verificar tabelas
        verificar_tabelas()
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        print("üí° Verifique as configura√ß√µes no arquivo .env")

def verificar_tabelas():
    """Verifica tabelas existentes no banco"""
    
    try:
        from django.db import connection
        
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name NOT LIKE 'sqlite_%'
            """)
            tables = cursor.fetchall()
        
        if tables:
            print(f"\nüìã Tabelas encontradas ({len(tables)}):")
            for table in tables:
                print(f"  ‚Ä¢ {table[0]}")
        else:
            print("\n‚ö†Ô∏è  Nenhuma tabela encontrada")
            print("üí° Execute: python manage.py migrate")
            
    except Exception as e:
        print(f"\n‚ö†Ô∏è  Erro ao verificar tabelas: {e}")

def verificar_migra√ß√µes():
    """Verifica status das migra√ß√µes"""
    
    print("\nüîÑ Verificando migra√ß√µes...")
    
    try:
        from django.core.management import call_command
        from io import StringIO
        
        # Capturar output do showmigrations
        output = StringIO()
        call_command('showmigrations', stdout=output)
        result = output.getvalue()
        
        if '[X]' in result:
            applied = result.count('[X]')
            total_lines = len([line for line in result.split('\n') if '[' in line])
            print(f"‚úÖ Migra√ß√µes aplicadas: {applied}/{total_lines}")
        
        if '[ ]' in result:
            pending = result.count('[ ]')
            print(f"‚ö†Ô∏è  Migra√ß√µes pendentes: {pending}")
            print("üí° Execute: python manage.py migrate")
        else:
            print("‚úÖ Todas as migra√ß√µes est√£o aplicadas")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar migra√ß√µes: {e}")

def verificar_variaveis_env():
    """Verifica vari√°veis de ambiente relacionadas ao banco"""
    
    print("\nüîß Vari√°veis de Ambiente:")
    
    env_vars = [
        'DB_ENGINE',
        'DB_NAME', 
        'DB_USER',
        'DB_PASSWORD',
        'DB_HOST',
        'DB_PORT'
    ]
    
    for var in env_vars:
        value = config(var, default='')
        if value:
            if 'PASSWORD' in var:
                print(f"  {var}: {'*' * len(value)}")
            else:
                print(f"  {var}: {value}")
        else:
            print(f"  {var}: (n√£o definido)")

def gerar_relatorio():
    """Gera relat√≥rio completo do banco"""
    
    print("\n" + "=" * 55)
    print("üìä RELAT√ìRIO FINAL")
    print("=" * 55)
    
    # Status geral
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
        print("‚úÖ Banco de dados: FUNCIONANDO")
    except:
        print("‚ùå Banco de dados: COM PROBLEMAS")
    
    # Verificar arquivo .env
    if os.path.exists('.env'):
        print("‚úÖ Arquivo .env: EXISTE")
    else:
        print("‚ùå Arquivo .env: N√ÉO ENCONTRADO")
    
    # Verificar .gitignore
    if os.path.exists('.gitignore'):
        print("‚úÖ Arquivo .gitignore: EXISTE")
    else:
        print("‚ùå Arquivo .gitignore: N√ÉO ENCONTRADO")
    
    print("\nüí° Para mais informa√ß√µes, consulte CONFIGURACAO_BANCO.md")

def main():
    verificar_configuracao_banco()
    verificar_variaveis_env()
    verificar_migra√ß√µes()
    gerar_relatorio()

if __name__ == '__main__':
    main()
