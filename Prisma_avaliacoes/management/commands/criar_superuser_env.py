"""
Comando Django personalizado para criar superusu√°rio a partir de vari√°veis de ambiente
Execute: python manage.py criar_superuser_env
"""

from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from decouple import config
from django.core.exceptions import ValidationError


class Command(BaseCommand):
    help = 'Cria superusu√°rio usando vari√°veis de ambiente do arquivo .env'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='For√ßa a cria√ß√£o mesmo se o usu√°rio j√° existir (atualiza senha)',
        )

    def handle(self, *args, **options):
        # Obter credenciais das vari√°veis de ambiente
        username = config('DJANGO_SUPERUSER_USERNAME', default='admin')
        password = config('DJANGO_SUPERUSER_PASSWORD', default='admin123')
        email = config('DJANGO_SUPERUSER_EMAIL', default='admin@exemplo.com')
        
        self.stdout.write(
            self.style.SUCCESS('üè¢ Prisma Avalia√ß√µes - Cria√ß√£o de Superusu√°rio')
        )
        self.stdout.write('=' * 50)
        self.stdout.write(f'üìß Username: {username}')
        self.stdout.write(f'üìß Email: {email}')
        
        # Verificar se usu√°rio j√° existe
        if User.objects.filter(username=username).exists():
            if options['force']:
                user = User.objects.get(username=username)
                user.set_password(password)
                user.email = email
                user.save()
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Superusu√°rio "{username}" atualizado!')
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è  Superusu√°rio "{username}" j√° existe!')
                )
                self.stdout.write(
                    'Use --force para atualizar ou escolha outro username no .env'
                )
            return
        
        try:
            # Validar dados
            if len(password) < 8:
                raise ValidationError('Senha deve ter pelo menos 8 caracteres')
            
            # Criar superusu√°rio
            user = User.objects.create_superuser(
                username=username,
                password=password,
                email=email
            )
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ Superusu√°rio "{username}" criado com sucesso!')
            )
            self.stdout.write(f'üîë Username: {username}')
            self.stdout.write(f'üîí Password: {"*" * len(password)}')
            self.stdout.write(f'üìß Email: {email}')
            self.stdout.write('')
            self.stdout.write('üåê Acesse o admin em: http://127.0.0.1:8000/admin/')
            
        except ValidationError as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro de valida√ß√£o: {e}')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao criar superusu√°rio: {e}')
            )
