#!/bin/bash

#=============================================================================
# SCRIPT DE DEPLOY PARA VPS - SISTEMA SEO PRISMA AVALIA√á√ïES
#=============================================================================

echo "üöÄ INICIANDO DEPLOY DO SISTEMA SEO - PRISMA AVALIA√á√ïES"
echo "=================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Diret√≥rio do projeto
PROJECT_DIR="/var/www/prisma_avaliacoes"

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [[ ! -d "$PROJECT_DIR" ]]; then
    error "Diret√≥rio do projeto n√£o encontrado: $PROJECT_DIR"
    exit 1
fi

cd "$PROJECT_DIR"

log "üìÇ Diret√≥rio atual: $(pwd)"

#=============================================================================
# 1. BACKUP E ATUALIZA√á√ÉO DO C√ìDIGO
#=============================================================================

log "üìã 1. FAZENDO BACKUP E ATUALIZANDO C√ìDIGO..."

# Backup do banco de dados
if [[ -f "db.sqlite3" ]]; then
    log "üíæ Fazendo backup do banco de dados..."
    cp db.sqlite3 "db.sqlite3.backup.$(date +%Y%m%d_%H%M%S)"
fi

# Atualizar c√≥digo
log "üì• Fazendo pull do reposit√≥rio..."
git stash push -m "Backup antes do deploy $(date)"
git pull origin master

if [[ $? -ne 0 ]]; then
    error "Falha no git pull"
    exit 1
fi

#=============================================================================
# 2. AMBIENTE VIRTUAL E DEPEND√äNCIAS
#=============================================================================

log "üêç 2. CONFIGURANDO AMBIENTE VIRTUAL..."

# Ativar ambiente virtual
if [[ -d "venv" ]]; then
    log "Ativando ambiente virtual..."
    source venv/bin/activate
else
    error "Ambiente virtual n√£o encontrado!"
    exit 1
fi

# Verificar/instalar depend√™ncias
log "üì¶ Verificando depend√™ncias..."
pip install --upgrade pip
pip install -r requirements.txt

#=============================================================================
# 3. CONFIGURA√á√ïES E MIGRA√á√ïES
#=============================================================================

log "‚öôÔ∏è 3. APLICANDO CONFIGURA√á√ïES E MIGRA√á√ïES..."

# Usar configura√ß√µes de produ√ß√£o
export DJANGO_SETTINGS_MODULE="setup.settings_production"

# Verificar se o Django consegue carregar
log "üîç Verificando configura√ß√µes..."
python manage.py check --settings=setup.settings_production

if [[ $? -ne 0 ]]; then
    error "Problemas nas configura√ß√µes do Django"
    exit 1
fi

# Aplicar migra√ß√µes
log "üóÑÔ∏è Aplicando migra√ß√µes..."
python manage.py makemigrations --settings=setup.settings_production
python manage.py migrate --settings=setup.settings_production

if [[ $? -ne 0 ]]; then
    error "Falha nas migra√ß√µes"
    exit 1
fi

#=============================================================================
# 4. ARQUIVOS EST√ÅTICOS E M√çDIA
#=============================================================================

log "üìÅ 4. COLETANDO ARQUIVOS EST√ÅTICOS..."

# Coletar arquivos est√°ticos
python manage.py collectstatic --noreload --settings=setup.settings_production

if [[ $? -ne 0 ]]; then
    warning "Problemas ao coletar arquivos est√°ticos"
fi

#=============================================================================
# 5. PERMISS√ïES E PROPRIEDADE
#=============================================================================

log "üîê 5. AJUSTANDO PERMISS√ïES..."

# Ajustar propriedade dos arquivos
chown -R www-data:www-data "$PROJECT_DIR"
chmod -R 755 "$PROJECT_DIR"

# Permiss√µes especiais para banco de dados
chmod 664 db.sqlite3 2>/dev/null || true
chown www-data:www-data db.sqlite3 2>/dev/null || true

# Permiss√µes para logs
mkdir -p logs
chmod 755 logs
chown www-data:www-data logs

#=============================================================================
# 6. TESTE DO SISTEMA SEO
#=============================================================================

log "üîç 6. TESTANDO SISTEMA SEO..."

# Verificar se app SEO foi instalado
python manage.py shell --settings=setup.settings_production << EOF
try:
    from seo.models import SEOMeta, SEOConfig
    print("‚úÖ Modelos SEO carregados com sucesso")
    
    # Testar importa√ß√£o de template tags
    from seo.templatetags.seo_tags import render_seo
    print("‚úÖ Template tags SEO funcionando")
    
    # Verificar sitemaps
    from seo.sitemaps import sitemaps
    print("‚úÖ Sitemaps configurados:", list(sitemaps.keys()))
    
except Exception as e:
    print("‚ùå Erro no sistema SEO:", str(e))
    exit(1)
EOF

if [[ $? -ne 0 ]]; then
    error "Problemas no sistema SEO"
    exit 1
fi

#=============================================================================
# 7. REINICIAR SERVI√áOS
#=============================================================================

log "üîÑ 7. REINICIANDO SERVI√áOS..."

# Reiniciar Nginx
systemctl reload nginx
if [[ $? -eq 0 ]]; then
    log "‚úÖ Nginx recarregado"
else
    warning "Problemas ao recarregar Nginx"
fi

# Reiniciar Gunicorn (se existir)
if systemctl is-active --quiet gunicorn; then
    systemctl restart gunicorn
    log "‚úÖ Gunicorn reiniciado"
fi

# Reiniciar Apache (se existir)
if systemctl is-active --quiet apache2; then
    systemctl restart apache2
    log "‚úÖ Apache reiniciado"
fi

#=============================================================================
# 8. VERIFICA√á√ÉO FINAL
#=============================================================================

log "‚úÖ 8. VERIFICA√á√ÉO FINAL..."

# Testar URLs importantes
log "üåê Testando URLs do sistema..."

# Fun√ß√£o para testar URL
test_url() {
    local url=$1
    local name=$2
    
    if curl -s -o /dev/null -w "%{http_code}" "http://localhost$url" | grep -q "200\|301\|302"; then
        log "‚úÖ $name: OK"
    else
        warning "‚ö†Ô∏è $name: Poss√≠vel problema"
    fi
}

test_url "/admin/" "Admin"
test_url "/sitemap.xml" "Sitemap"
test_url "/robots.txt" "Robots.txt"
test_url "/" "Homepage"

#=============================================================================
# DEPLOY CONCLU√çDO
#=============================================================================

echo ""
echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
echo "================================"
echo ""
echo "üìä RESUMO:"
echo "‚Ä¢ ‚úÖ C√≥digo atualizado via Git"
echo "‚Ä¢ ‚úÖ Migra√ß√µes aplicadas (incluindo SEO)"
echo "‚Ä¢ ‚úÖ Arquivos est√°ticos coletados"
echo "‚Ä¢ ‚úÖ Permiss√µes ajustadas"
echo "‚Ä¢ ‚úÖ Sistema SEO instalado e testado"
echo "‚Ä¢ ‚úÖ Servi√ßos reiniciados"
echo ""
echo "üåê URLs importantes:"
echo "‚Ä¢ Admin: https://prismaavaliacoes.com.br/admin/"
echo "‚Ä¢ Sitemap: https://prismaavaliacoes.com.br/sitemap.xml"
echo "‚Ä¢ Robots: https://prismaavaliacoes.com.br/robots.txt"
echo ""
echo "üîß Pr√≥ximos passos:"
echo "1. Acessar admin e configurar SEO global"
echo "2. Testar SEO em artigos existentes"
echo "3. Verificar sitemaps e robots.txt"
echo ""
echo "‚ú® Sistema SEO pronto para impulsionar seu ranking!"

# Desativar ambiente virtual
deactivate 2>/dev/null || true

log "üèÅ Deploy finalizado em $(date)"
