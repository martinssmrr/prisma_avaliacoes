#!/usr/bin/env python3
"""
Script de Verifica√ß√£o Local do Sistema SEO
Prisma Avalia√ß√µes Imobili√°rias

Este script verifica se o sistema SEO est√° completo e pronto para deploy
"""

import os
import sys
from pathlib import Path

def check_file_exists(file_path, description=""):
    """Verifica se um arquivo existe"""
    if Path(file_path).exists():
        print(f"‚úÖ {file_path} {description}")
        return True
    else:
        print(f"‚ùå {file_path} {description} - FALTANDO!")
        return False

def main():
    print("=" * 80)
    print("üîç VERIFICA√á√ÉO LOCAL DO SISTEMA SEO")
    print("=" * 80)
    
    base_dir = Path(__file__).parent
    missing_files = []
    
    # 1. Verificar estrutura do app SEO
    print("\n1Ô∏è‚É£ Verificando estrutura do app SEO...")
    
    seo_files = {
        'seo/__init__.py': 'Inicializador do app',
        'seo/models.py': 'Models SEOMeta e SEOConfig',
        'seo/admin.py': 'Interface admin',
        'seo/apps.py': 'Configura√ß√£o do app',
        'seo/views.py': 'Views do SEO',
        'seo/urls.py': 'URLs do SEO',
        'seo/signals.py': 'Sinais Django',
        'seo/context_processors.py': 'Processadores de contexto',
        'seo/sitemaps.py': 'Gera√ß√£o de sitemaps',
        'seo/templatetags/__init__.py': 'Inicializador template tags',
        'seo/templatetags/seo_tags.py': 'Template tags do SEO',
        'seo/templates/seo/seo_head.html': 'Template principal SEO',
        'seo/templates/seo/json_ld.html': 'Template JSON-LD',
        'seo/migrations/__init__.py': 'Inicializador migra√ß√µes',
        'seo/migrations/0001_initial.py': 'Migra√ß√£o inicial',
        'seo/management/__init__.py': 'Inicializador comandos',
        'seo/management/commands/__init__.py': 'Inicializador comandos',
    }
    
    for file_path, description in seo_files.items():
        full_path = base_dir / file_path
        if not check_file_exists(full_path, f"- {description}"):
            missing_files.append(file_path)
    
    # 2. Verificar configura√ß√µes
    print("\n2Ô∏è‚É£ Verificando arquivos de configura√ß√£o...")
    
    config_files = {
        'setup/settings.py': 'Settings desenvolvimento',
        'setup/settings_production.py': 'Settings produ√ß√£o',
        'setup/urls.py': 'URLs principais',
        'manage.py': 'Script de gerenciamento',
    }
    
    for file_path, description in config_files.items():
        full_path = base_dir / file_path
        if not check_file_exists(full_path, f"- {description}"):
            missing_files.append(file_path)
    
    # 3. Verificar se SEO est√° nos settings
    print("\n3Ô∏è‚É£ Verificando configura√ß√£o nos settings...")
    
    try:
        # Verificar settings.py
        settings_path = base_dir / 'setup/settings.py'
        with open(settings_path, 'r', encoding='utf-8') as f:
            settings_content = f.read()
            
        if '"seo"' in settings_content or "'seo'" in settings_content:
            print("‚úÖ App 'seo' encontrado em INSTALLED_APPS (settings.py)")
        else:
            print("‚ùå App 'seo' N√ÉO encontrado em INSTALLED_APPS (settings.py)")
            missing_files.append("seo app in settings.py")
            
        # Verificar settings_production.py  
        settings_prod_path = base_dir / 'setup/settings_production.py'
        with open(settings_prod_path, 'r', encoding='utf-8') as f:
            settings_prod_content = f.read()
            
        if '"seo"' in settings_prod_content or "'seo'" in settings_prod_content:
            print("‚úÖ App 'seo' encontrado em INSTALLED_APPS (settings_production.py)")
        else:
            print("‚ùå App 'seo' N√ÉO encontrado em INSTALLED_APPS (settings_production.py)")
            missing_files.append("seo app in settings_production.py")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar settings: {e}")
        missing_files.append("settings verification")
    
    # 4. Verificar se existem arquivos template tags
    print("\n4Ô∏è‚É£ Verificando template tags...")
    
    seo_tags_path = base_dir / 'seo/templatetags/seo_tags.py'
    if seo_tags_path.exists():
        try:
            with open(seo_tags_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            required_tags = ['render_seo_meta', 'get_seo_config', 'render_json_ld']
            for tag in required_tags:
                if tag in content:
                    print(f"‚úÖ Template tag '{tag}' encontrada")
                else:
                    print(f"‚ùå Template tag '{tag}' N√ÉO encontrada")
                    missing_files.append(f"template tag {tag}")
                    
        except Exception as e:
            print(f"‚ùå Erro ao verificar template tags: {e}")
    
    # 5. Verificar estrutura de templates
    print("\n5Ô∏è‚É£ Verificando templates...")
    
    template_files = [
        'seo/templates/seo/seo_head.html',
        'seo/templates/seo/json_ld.html',
    ]
    
    for template in template_files:
        full_path = base_dir / template
        if not check_file_exists(full_path, "- Template SEO"):
            missing_files.append(template)
    
    # 6. Verificar se as migra√ß√µes est√£o corretas
    print("\n6Ô∏è‚É£ Verificando migra√ß√µes...")
    
    migration_path = base_dir / 'seo/migrations/0001_initial.py'
    if migration_path.exists():
        try:
            with open(migration_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            required_models = ['SEOConfig', 'SEOMeta']
            for model in required_models:
                if model in content:
                    print(f"‚úÖ Model '{model}' encontrado na migra√ß√£o")
                else:
                    print(f"‚ùå Model '{model}' N√ÉO encontrado na migra√ß√£o")
                    missing_files.append(f"migration {model}")
                    
        except Exception as e:
            print(f"‚ùå Erro ao verificar migra√ß√£o: {e}")
    
    # 7. Resumo
    print("\n" + "=" * 80)
    
    if missing_files:
        print(f"‚ùå VERIFICA√á√ÉO FALHOU - {len(missing_files)} problemas encontrados:")
        for item in missing_files:
            print(f"   - {item}")
        print("\nüîß CORRIJA OS PROBLEMAS ANTES DE FAZER O DEPLOY!")
        return False
    else:
        print("‚úÖ VERIFICA√á√ÉO PASSOU - Sistema SEO est√° completo!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Fazer commit dos arquivos: git add . && git commit -m 'Sistema SEO completo'")
        print("2. Fazer push: git push origin main")
        print("3. No servidor: git pull")
        print("4. No servidor: python3 migrate_seo_to_production.py")
        print("5. Reiniciar servi√ßos")
        return True

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
