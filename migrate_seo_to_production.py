#!/usr/bin/env python3
"""
Script para migra√ß√£o completa do Sistema SEO para Produ√ß√£o
Prisma Avalia√ß√µes Imobili√°rias

Este script deve ser executado no servidor de produ√ß√£o para:
1. Verificar se o app SEO existe
2. Aplicar as migra√ß√µes
3. Verificar se a configura√ß√£o est√° correta
4. Criar configura√ß√£o inicial se necess√°rio
"""

import os
import sys
import django
from pathlib import Path

# Configurar o ambiente Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'setup.settings_production')

# Adicionar o caminho do projeto
PROJECT_ROOT = Path('/var/www/prisma_avaliacoes')
sys.path.insert(0, str(PROJECT_ROOT))

# Configurar Django
django.setup()

from django.core.management import call_command
from django.db import connection
from django.apps import apps

def main():
    print("=" * 80)
    print("üöÄ MIGRA√á√ÉO DO SISTEMA SEO PARA PRODU√á√ÉO")
    print("=" * 80)
    
    # 1. Verificar se o app SEO est√° instalado
    print("\n1Ô∏è‚É£ Verificando instala√ß√£o do app SEO...")
    try:
        seo_app = apps.get_app_config('seo')
        print(f"‚úÖ App SEO encontrado: {seo_app.name}")
    except:
        print("‚ùå App SEO N√ÉO ENCONTRADO!")
        print("   O app 'seo' deve estar em INSTALLED_APPS")
        return False
    
    # 2. Verificar estrutura de arquivos
    print("\n2Ô∏è‚É£ Verificando estrutura de arquivos...")
    seo_files_required = [
        'seo/models.py',
        'seo/admin.py', 
        'seo/apps.py',
        'seo/views.py',
        'seo/urls.py',
        'seo/templatetags/seo_tags.py',
        'seo/migrations/0001_initial.py',
    ]
    
    missing_files = []
    for file_path in seo_files_required:
        full_path = PROJECT_ROOT / file_path
        if full_path.exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - ARQUIVO FALTANDO!")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è {len(missing_files)} arquivos faltando!")
        print("Execute 'git pull' para sincronizar os arquivos.")
        return False
    
    # 3. Aplicar migra√ß√µes
    print("\n3Ô∏è‚É£ Aplicando migra√ß√µes do SEO...")
    try:
        call_command('migrate', 'seo', verbosity=2)
        print("‚úÖ Migra√ß√µes aplicadas com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao aplicar migra√ß√µes: {e}")
        return False
    
    # 4. Verificar se as tabelas foram criadas
    print("\n4Ô∏è‚É£ Verificando tabelas do banco...")
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'seo_%'")
            tables = cursor.fetchall()
            
        if tables:
            print("‚úÖ Tabelas SEO criadas:")
            for table in tables:
                print(f"   - {table[0]}")
        else:
            print("‚ùå Nenhuma tabela SEO encontrada!")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar tabelas: {e}")
        return False
    
    # 5. Testar importa√ß√£o dos models
    print("\n5Ô∏è‚É£ Testando models do SEO...")
    try:
        from seo.models import SEOMeta, SEOConfig
        
        # Contar registros
        meta_count = SEOMeta.objects.count()
        config_count = SEOConfig.objects.count()
        
        print(f"‚úÖ SEOMeta: {meta_count} registros")
        print(f"‚úÖ SEOConfig: {config_count} registros")
        
        # Criar configura√ß√£o inicial se n√£o existir
        if config_count == 0:
            print("\n6Ô∏è‚É£ Criando configura√ß√£o inicial...")
            config = SEOConfig.objects.create(
                site_name='Prisma Avalia√ß√µes Imobili√°rias',
                site_domain='prismaavaliacoes.com.br',
                site_description='Avalia√ß√µes imobili√°rias profissionais e consultoria especializada em Minas Gerais',
                default_keywords='avalia√ß√£o imobili√°ria, laudo de avalia√ß√£o, per√≠cia imobili√°ria, consultoria imobili√°ria, Belo Horizonte, Minas Gerais'
            )
            print("‚úÖ Configura√ß√£o inicial criada!")
        
    except Exception as e:
        print(f"‚ùå Erro ao testar models: {e}")
        return False
    
    # 6. Verificar admin
    print("\n7Ô∏è‚É£ Testando admin do SEO...")
    try:
        from django.contrib import admin
        from seo.admin import SEOMetaAdmin, SEOConfigAdmin
        
        # Verificar se est√£o registrados
        if SEOMeta in admin.site._registry:
            print("‚úÖ SEOMetaAdmin registrado")
        else:
            print("‚ùå SEOMetaAdmin N√ÉO registrado")
            
        if SEOConfig in admin.site._registry:
            print("‚úÖ SEOConfigAdmin registrado")
        else:
            print("‚ùå SEOConfigAdmin N√ÉO registrado")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar admin: {e}")
        return False
    
    # 7. Coletar arquivos est√°ticos
    print("\n8Ô∏è‚É£ Coletando arquivos est√°ticos...")
    try:
        call_command('collectstatic', '--noinput', verbosity=1)
        print("‚úÖ Arquivos est√°ticos coletados!")
    except Exception as e:
        print(f"‚ö†Ô∏è Aviso ao coletar est√°ticos: {e}")
    
    print("\n" + "=" * 80)
    print("üéâ MIGRA√á√ÉO DO SEO CONCLU√çDA COM SUCESSO!")
    print("=" * 80)
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. Reiniciar o Gunicorn: sudo systemctl restart gunicorn")
    print("2. Verificar logs: sudo tail -f /var/log/gunicorn/gunicorn.log")
    print("3. Acessar admin: https://prismaavaliacoes.com.br/admin/")
    print("4. Procurar se√ß√£o 'SEO' no menu do admin")
    print("\n‚úÖ Sistema SEO pronto para uso em produ√ß√£o!")
    
    return True

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
